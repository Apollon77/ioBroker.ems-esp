###############################
# for EMS-ESP v3.4.1          #
###############################
#CH working hours
sensor:
  - name: "Boiler CH working hours"
    unit_of_measurement: 'hr'
    icon: 'mdi:clock-check-outline'
    state: >
      {% set mins = states('sensor.boiler_total_heat_operating_time') %}
      {% set hours = ((mins | int /  60) | string).split('.')[0] %}
      {{hours}}  

#Burner working hours
  - name: 'Boiler burner working hours'
    unit_of_measurement: 'hr'
    icon: 'mdi:clock-check-outline'
    state: >
      {% set mins = states('sensor.boiler_heatworkmin') %}
      {% set hours = ((mins | int /  60) | string).split('.')[0] %}
      {{hours}}  

#Boiler Service Code
  - name:  'Boiler service code text'
    icon: 'mdi:information'
    state: >
      {% set sc = states('sensor.boiler_servicecodenumber') %}
      {% if sc == '200' %} CH active
      {% elif sc == '201' %} HW active
      {% elif sc == '202' %} CH anti cycle
      {% elif sc == '203' %} Standby
      {% elif sc == '204' %} CH cooling
      {% elif sc == '208' %} Service test
      {% elif sc == '265' %} Low CH load
      {% elif sc == '268' %} Component test
      {% elif sc == '270' %} Power up
      {% elif sc == '283' %} Burner start
      {% elif sc == '284' %} Ignition
      {% elif sc == '305' %} HW anti cycle
      {% elif sc == '357' %} Air purge
      {% elif sc == '358' %} Valve kick
      {% else %} {{ sc }}
      {% endif %}

#Boiler Uptime Hours
  - name:  'Boiler Total Uptime hours'
    unit_of_measurement: 'hr'
    icon: 'mdi:clock-check-outline'
    state: >
      {% set mins = states('sensor.boiler_ubauptime') %}
      {% set hours = ((mins | int /  60) | string).split('.')[0] %}
      {{hours}}  


#EMS-ESP Working Hours
  - name: 'System Uptime (hr)'
    unit_of_measurement: 'hr'
    icon: 'mdi:clock-check-outline'
    state: >
      {% set mins = states('sensor.system_uptime_sec') %}
      {% set hours = ((mins | int /  3600) | string).split('.')[0] %}
      {{hours}} 


# For Kostal Plenticore

  - name: "Kostal DC Power (String 1+2) "
    unit_of_measurement: "W"
    device_class: energy
    state: >
      {% set pv1 = states('sensor.kostal_dc1_power') | int %}
      {% set pv2 = states('sensor.kostal_dc2_power') | int %}
      {{ (pv1 + pv2) }}

  - name: "Kostal PV Power"
    unit_of_measurement: "W"
    device_class: energy
    state: >
      {% set togrid = states('sensor.ksem_power_togrid') | int %}
      {% set tobatt = states('sensor.kostal_pv_to_battery_power') | int %}
      {% set tohome = states('sensor.kostal_home_power_from_pv') | int %}
      {{ (togrid + tobatt + tohome) }}  

  - name: "Kostal Energy PV to Grid Total (Template)"
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total
    state: >
      {% set yield = states('sensor.kostal_energy_yield_total') | float %}
      {% set batteryToHome = states('sensor.kostal_home_consumption_from_battery_total') | float %}
      {% set pvToHome = states('sensor.kostal_home_consumption_from_pv_total') | float %}
      {{ yield - pvToHome - batteryToHome }}

# For Gas Power

  - name: "Gas Power "
    unit_of_measurement: "kW"
    device_class: power
    state: >
      {% set modulation = states('sensor.boiler_curburnpow') | int %}
      {{ (modulation * 22 / 100) }}

# For text empty state

  - name: "empty"
    state: >
      {{ "" }}